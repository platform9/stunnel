--- stunnel-5.56/src/client.c	2019-11-11 12:05:09.000000000 -0800
+++ stunnel-5.56-platform9/src/client.c	2020-07-09 16:47:05.408071340 -0700
@@ -902,6 +902,7 @@
                 c->ssl_ptr-=(size_t)num;
                 memset(c->ssl_buff+c->ssl_ptr, 0, (size_t)num); /* paranoia */
                 c->sock_bytes+=(size_t)num;
+                s_log(LOG_NOTICE, "wrote %ld byte(s) to socket", num);
                 watchdog=0; /* reset the watchdog */
             }
         }
@@ -922,6 +923,7 @@
                 break; /* do not reset the watchdog */
             default:
                 c->sock_ptr+=(size_t)num;
+                s_log(LOG_NOTICE, "read %ld byte(s) from socket", num);
                 watchdog=0; /* reset the watchdog */
             }
         }
@@ -950,6 +952,7 @@
                 c->sock_ptr-=(size_t)num;
                 memset(c->sock_buff+c->sock_ptr, 0, (size_t)num); /* paranoia */
                 c->ssl_bytes+=(size_t)num;
+                s_log(LOG_NOTICE, "wrote %ld byte(s) to TLS", num);
                 watchdog=0; /* reset the watchdog */
                 break;
             case SSL_ERROR_WANT_WRITE: /* buffered data? */
@@ -1007,6 +1010,7 @@
                     break; /* do not reset the watchdog */
                 }
                 c->ssl_ptr+=(size_t)num;
+                s_log(LOG_NOTICE, "read %ld byte(s) from TLS", num);
                 watchdog=0; /* reset the watchdog */
                 break;
             case SSL_ERROR_WANT_WRITE:
@@ -1594,10 +1598,12 @@
         return;
     }
 
-    /* check if the address was already set in protocol negotiations */
-    /* used by the following protocols: CONNECT, SOCKS */
-    if(c->connect_addr.num)
-        return;
+    /* Platform9 CORE-956: don't reuse cached addresses */
+    if(c->connect_addr.num) {
+        s_log(LOG_NOTICE, "Clearing cached address(es)");
+        str_free(c->connect_addr.addr);
+        addrlist_clear(&c->connect_addr, 0);
+    }
 
     /* transparent destination */
     if(c->opt->option.transparent_dst) {
